input {
    redis {
        data_type => "list"
        key => "clickhouse"
        host => "redis"
        threads => 5
    }
#  file {
#    path => "/var/logs/mount/test.log"
#  }
}
filter {
    # first step, detact log type
    grok{
        match => {
            # for papertrail
            #"message" => '%{NUMBER:no01}\t%{TIMESTAMP_ISO8601:logtime}\t%{TIMESTAMP_ISO8601:logtime_1}\t%{NUMBER:no02}\t%{GREEDYDATA:project}\t%{IP:ip}\t%{GREEDYDATA:localn}%{LOGLEVEL:heroku_log_level}\t%{GREEDYDATA:heroku_log_type}\t%{GREEDYDATA:real_log}\\n'

            # for heroku log drain
            "message" => '%{NUMBER:no01} <%{NUMBER:no02}>%{NUMBER:no03} %{NOTSPACE:logtime} %{NOTSPACE:str01} %{NOTSPACE:str01} %{NOTSPACE:str01} %{NOTSPACE:str01} %{NOTSPACE:str01} %{GREEDYDATA:real_log}'
        }
        add_tag => [ "splited"]
    }

    mutate {
        remove_field => [ "no01", "no02", "logtime_1", "localn" ]
    }

    ruby {
        code => "
            event.set('timestamp', Time.at(Time.parse(event.get('logtime')).to_i+32400).strftime('%Y-%m-%d %H:%M:%S'))
        "
    }

    # handle heroku router log, start with at=info
    grok{
        match => {
            "real_log" => "(?<at>(at=%{LOGLEVEL:at_level}))"
        }
        add_tag => [ "router_log"]
    }

    if "router_log" in [tags] {
        if "code=" in [real_log] and "desc=" in [real_log] {
            grok{
                match => {
                    "real_log" => 'at=%{WORD:at} code=%{GREEDYDATA:heroku_code} desc=%{GREEDYDATA:heroku_desc} method=%{WORD:method} path="%{URIPATH:uri_path}%{URIPARAM:uri_param}?" host=%{URIHOST:request_host} request_id=%{UUID:request_id} fwd="%{GREEDYDATA:fwd}" dyno=%{NOTSPACE:dyno} connect=%{NUMBER:connect}ms service=%{NUMBER:service}ms status=%{NUMBER:status} bytes=%{NUMBER:bytes} protocol=%{WORD:protocal}'
                }
                add_tag => [ "parsed"]
            }
        } else {
            grok{
                match => {
                    "real_log" => 'at=%{WORD:at} method=%{WORD:method} path="%{URIPATH:uri_path}%{URIPARAM:uri_param}?" host=%{URIHOST:request_host} request_id=%{UUID:request_id} fwd="%{GREEDYDATA:fwd}" dyno=%{NOTSPACE:dyno} connect=%{NUMBER:connect}ms service=%{NUMBER:service}ms status=%{NUMBER:status} bytes=%{NUMBER:bytes} protocol=%{WORD:protocal}'
                }
                add_tag => [ "parsed"]
                add_field => {
                    "heroku_code" => ""
                    "heroku_desc" => ""
                }
            }
        }
        if "parsed" in [tags] {
            mutate {
                convert => ["status", "integer"]
            }

            if [status] > 499 {
                mutate {
                    add_tag => [ "noticeable", "router_5xx" ]
                }
            }
        }
    } else {
        grok{
            match => {
                "real_log" => '\[%{GREEDYDATA:time_original}\] %{DATA:project}.%{LOGLEVEL:heroku_level}: %{GREEDYDATA:log_original} \[\]'
            }
        }

        if [log_original] {
            if "Operation Log" in [log_original] {
                mutate {
                    add_tag => [ "parsed", "operation_log" ]
                }
            } else if "OneSignal Success" in [log_original] {
                mutate {
                    add_tag => [ "parsed", "push", "push_via_onesignal" ]
                }
            } else if "SendGrid send mail success" in [log_original] {
                mutate {
                    add_tag => [ "parsed", "email", "email_via_sendgrid" ]
                    add_field => {"email_provider" => "sendgrid"}
                }
            } else if "LINE pushMessage" in [log_original] {
                mutate {
                    add_tag => [ "parsed", "line" ]
                }
            }

        } else {
            drop {}
            grok{
                match => {
                    "real_log" => '\[%{GREEDYDATA:time_original}\] "%{WORD:method} %{URIPATH:uri_path}%{URIPARAM:uri_param}? HTTP/%{GREEDYDATA:http_version}" %{GREEDYDATA:status} %{GREEDYDATA:bytes} "%{GREEDYDATA:referrer}" "%{GREEDYDATA:user_agent}'
                }
                add_tag => [ "parsed", "apache_access_log" ]
            }

            if ! [uri_param] {
                mutate {add_field => {"uri_param" => ""} }
            }
        }
    }

    if "operation_log" in [tags] {
        grok{
            match => {
                "real_log" => 'Operation Log : %{GREEDYDATA:operation_log} \[\]'
            }
        }
        json {
            source => "operation_log"
        }

        if ! [input] {
            mutate {add_field => {"input" => ""} }
        }

        if ! [route] {
            mutate {add_field => {"route" => ""} }
        }

        mutate {
            remove_field => [
                "no01", "content", "session_id", "host"
            ]
            convert => { "user_id" => "integer" }

            gsub => [
                "input", "'", '\\''
            ]
        }
    }
    if "push_via_onesignal" in [tags] {
        grok{
            match => {
                "log_original" => 'OneSignal %{GREEDYDATA:push_status} %{GREEDYDATA:push_user_type}_id => %{NUMBER:push_user_id}, %{GREEDYDATA:push_subject}: %{GREEDYDATA:push_message_id}  \[\]'
            }
        }
        mutate {
            gsub => [
                "push_subject", "'", '\\''
            ]
            add_field => {
                "push_provider" => "onesignal"
            }
        }
    } else if "email_via_sendgrid" in [tags] {
        grok{
            match => {
                "log_original" => 'SendGrid send mail %{GREEDYDATA:email_status} \'%{GREEDYDATA:email_subject}\' : X-Message-Id: %{GREEDYDATA:email_message_id}, to : %{GREEDYDATA:email_to}'
            }
        }
        mutate {
            gsub => [
                "email_subject", "'", '\\''
            ]
        }
    }

    if "line" in [tags] {
        grok{
            match => {
                "log_original" => '\[%{WORD:line_event}\] LINE pushMessage to %{GREEDYDATA:line_open_id} , (Result|message) : %{GREEDYDATA:line_data}  \[\]'
            }
        }
        mutate {
            gsub => [
                "line_data", "'", '\\''
            ]
        }
    }

}
output {
    #stdout{}
    if "splited" in [tags] {
        if "parsed" in [tags] {
            if "router_log" in [tags] {
                http {
                    url => "http://clickhouse:8123/"
                    http_method => "post"
                    format => "message"
                    #message => "insert into comiru.router_log (request_id, path, method, status, bytes, service, fwd, host, timestamp) values ('%{request_id}', '%{uri_path}', '%{method}', '%{status}', '%{bytes}', '%{service}', '%{fwd}', '%{request_host}', '%{timestamp}');"
                    message => "insert into comiru.router_log (request_id, path, method, status, bytes, service, ip, fwd, host, timestamp) values ('%{request_id}', '%{uri_path}', '%{method}', '%{status}', '%{bytes}', '%{service}', '%{ip}', '%{fwd}', '%{request_host}', '%{timestamp}');"
                }

            } else if "operation_log" in [tags] {
                http {
                    url => "http://clickhouse:8123/"
                    http_method => "post"
                    format => "message"
                    message => "insert into comiru.operation_log (user_id, user_type, path, route, user_agent, request_id, ip, input, timestamp) values (%{user_id}, '%{user_type}', '%{path}', '%{route}', '%{user_agent}', '%{request_id}', '%{ip}', '%{input}', '%{timestamp}');"
                }
            } else if "push" in [tags] {
                http {
                     url => "http://clickhouse:8123/"
                     http_method => "post"
                     format => "message"
                     message => "insert into comiru.push_log_v2 (provider, message_id, user_type, user_id, subject, status, timestamp) values ('%{push_provider}','%{push_message_id}', '%{push_user_type}', '%{push_user_id}', '%{push_subject}', '%{push_status}', '%{timestamp}');"
                }
            } else if "email" in [tags] {
                http {
                     url => "http://clickhouse:8123/"
                     http_method => "post"
                     format => "message"
                     message => "insert into comiru.email_log_v2 (provider, message_id, subject, to, status, timestamp) values ('%{email_provider}', '%{email_message_id}', '%{email_subject}', '%{email_to}', '%{email_status}', '%{timestamp}');"
                }
            } else if "line" in [tags] {
                http {
                     url => "http://clickhouse:8123/"
                     http_method => "post"
                     format => "message"
                     message => "insert into comiru.line_log_v2 (open_id, event, data, timestamp) values ('%{line_open_id}', '%{line_event}', '%{line_data}', '%{timestamp}');"
                }
            }
        }
    }
    #else {
     #   file {
     #       path => "/var/logs/unsplited.log"
     #       codec => line { format => "%{message}"}
     #   }
    #}
}
