# This workflow integrates Scan with GitHub's code scanning feature
# Scan is a free open-source security tool for modern DevOps teams from ShiftLeft
# Visit https://slscan.io/en/latest/integrations/code-scan for help
name: SL Scan

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '24 2 * * 0'

jobs:
  Scan-Build:
    # Scan runs on ubuntu, mac and windows
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # Instructions
    # 1. Setup JDK, Node.js, Python etc depending on your project type
    # 2. Compile or build the project before invoking scan
    #    Example: mvn compile, or npm install or pip install goes here
    # 3. Invoke Scan with the github token. Leave the workspace empty to use relative url

    - name: Perform Scan
      uses: ShiftLeftSecurity/scan-action@master
      env:
        WORKSPACE: ""
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SCAN_AUTO_BUILD: true
      with:
        output: reports
        # Scan auto-detects the languages in your project. To override uncomment the below variable and set the type
        # type: credscan,java
        # type: python

    - name: Upload report
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: reports
        
    - name: Aqua Security Trivy
      # You may pin to the exact commit or the version.
      # uses: aquasecurity/trivy-action@8eccb5539730451af599c84f444c6d6cf0fc2bb0
      uses: aquasecurity/trivy-action@0.0.20
      with:
        # Scan type to use for scanning vulnerability
        scan-type: image
        # image reference(for backward compatibility)
        image-ref: 
        # reference of tar file to scan
        input: # optional, default is 
        # Scan reference
        scan-ref: .
        # exit code when vulnerabilities were found
        exit-code: # optional, default is 0
        # ignore unfixed vulnerabilities
        ignore-unfixed: # optional, default is false
        # comma-separated list of vulnerability types (os,library)
        vuln-type: # optional, default is os,library
        # severities of vulnerabilities to be displayed
        severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
        # output format (table, json, template)
        format: table
        # use an existing template for rendering output (@/contrib/sarif.tpl, @/contrib/gitlab.tpl, @/contrib/junit.tpl
        template: # optional, default is 
        # writes results to a file with the specified file name
        output: # optional, default is 
        # comma separated list of directories where traversal is skipped
        skip-dirs: # optional, default is 
        # specify where the cache is stored
        cache-dir: # optional, default is 
        # timeout (default 2m0s)
        timeout: # optional, default is 
        # filter vulnerabilities with OPA rego language
        ignore-policy: # optional, default is 
        # hide progress output
        hide-progress: false
