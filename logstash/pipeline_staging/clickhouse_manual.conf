input {
    redis {
        data_type => "list"
        key => "clickhouse"
        host => "${REDIS_INTERNAL_HOST}"
        port => "${REDIS_INTERNAL_PORT}"
        threads => 5
        tags => ["comiru_app_log_ch"]
    }
}

filter {
    if "comiru_app_log_ch" in [tags] {
        grok{
            match => {
                # for papertrail
                "message" => '%{NUMBER:no01}\t%{TIMESTAMP_ISO8601:logtime}\t%{TIMESTAMP_ISO8601:logtime_1}\t%{NUMBER:no02}\t%{GREEDYDATA:project}\t%{IP:ip}\t%{GREEDYDATA:localn}%{LOGLEVEL:heroku_log_level}\t%{GREEDYDATA:heroku_log_type}\t%{GREEDYDATA:real_log}\\n'

                # for heroku log drain
                #"message" => '%{NUMBER:no01} <%{NUMBER:no02}>%{NUMBER:no03} %{NOTSPACE:logtime} %{NOTSPACE:str01} %{NOTSPACE:str01} %{NOTSPACE:str01} %{NOTSPACE:str01} %{NOTSPACE:str01} %{GREEDYDATA:real_log}'
            }
            add_tag => [ "splited"]
        }

        mutate {
            remove_field => [ "no01", "no02", "logtime_1", "localn" ]
        }

        ruby {
            code => "
                event.set('timestamp', Time.at(Time.parse(event.get('logtime')).to_i+32400).strftime('%Y-%m-%d %H:%M:%S'))
            "
        }

        # handle heroku router log, start with at=info
        grok{
            match => {
                "real_log" => "(?<at>(at=%{LOGLEVEL:at_level}))"
            }
            add_tag => [ "router_log"]
        }

        if "router_log" in [tags] {
            if "code=" in [real_log] and "desc=" in [real_log] {
                grok{
                    match => {
                        "real_log" => 'at=%{WORD:at} code=%{GREEDYDATA:heroku_code} desc=%{GREEDYDATA:heroku_desc} method=%{WORD:method} path="%{URIPATH:uri_path}%{URIPARAM:uri_param}?" host=%{URIHOST:request_host} request_id=%{UUID:request_id} fwd="%{GREEDYDATA:fwd}" dyno=%{NOTSPACE:dyno} connect=%{NUMBER:connect}ms service=%{NUMBER:service}ms status=%{NUMBER:status} bytes=%{NUMBER:bytes} protocol=%{WORD:protocal}'
                    }
                    add_tag => [ "parsed"]
                }
            } else {
                grok{
                    match => {
                        "real_log" => 'at=%{WORD:at} method=%{WORD:method} path="%{URIPATH:uri_path}%{URIPARAM:uri_param}?" host=%{URIHOST:request_host} request_id=%{UUID:request_id} fwd="%{GREEDYDATA:fwd}" dyno=%{NOTSPACE:dyno} connect=%{NUMBER:connect}ms service=%{NUMBER:service}ms status=%{NUMBER:status} bytes=%{NUMBER:bytes} protocol=%{WORD:protocal}'
                    }
                    add_tag => [ "parsed"]
                    add_field => {
                        "heroku_code" => ""
                        "heroku_desc" => ""
                    }
                }
            }
            if "parsed" in [tags] {
                mutate {
                    convert => ["status", "integer"]
                }

                if [status] > 499 {
                    mutate {
                        add_tag => [ "noticeable", "router_5xx" ]
                    }
                }
            }
        }  elseif " sample#" in [real_log] {
              mutate {
                  gsub => [
                      "real_log", "bytes", "",
                      "real_log", "kB", "",
                      "real_log", "mB", "",
                      "real_log", "gB", "",
                      "real_log", "MB", "",
                      "real_log", "pages", ""
                  ]
                  add_tag => [ "parsed", "metrics" ]
              }

              kv {
                  source => "real_log"
                  value_split => "="
                  target => "metrics"
              }

              if [metrics][dyno] {
                  grok{
                      match => {
                          "[metrics][dyno]" => 'heroku\.%{DATA:app_id}\.%{GREEDYDATA:dyno_id}'
                      }
                      target => "metrics"
                  }
                  mutate {
                      add_field => {
                          "[metrics][source_type]" => "dyno"
                      }
                  }
              }

              if [metrics][source] and ("web." in [metrics][source] or "worker." in [metrics][source] or "scheduler." in [metrics][source]){
                  grok{
                      match => {
                          "[metrics][source]" => '%{DATA:metrics_source}\.%{GREEDYDATA:instance}'
                      }
                      target => "metrics"
                  }
                  mutate {
                      remove_field => ["[metrics][source]", "[metrics][dyno]"]
                  }
                  mutate {
                      add_field => {
                          "[metrics][source]" => "%{[metrics][metrics_source]}"
                      }
                      remove_field => ["[metrics][metrics_source]"]
                  }
              }

              if "source=REDIS" in [real_log] or "source=HEROKU" in [real_log] or "source=DATABASE" in [real_log] {
                  mutate {
                      add_field => {
                          "[metrics][app_id]" => "%{[metrics][source]}"
                          "[metrics][instance]" => "%{[metrics][addon]}"
                          "[metrics][source_type]" => "addon"
                      }
                      remove_field => ["[metrics][addon]", "[metrics][metrics_source]"]
                  }
              }

        } elseif "app/postgres" in [real_log] {
                  mutate {
                      gsub => [
                          "real_log", "bytes", "",
                          "real_log", "kB", "",
                          "real_log", "mB", "",
                          "real_log", "gB", "",
                          "real_log", "MB", "",
                          "real_log", "pages", ""
                      ]
                      add_tag => [ "parsed", "metrics" ]
                  }
        } else {
          grok{
              match => {
                  "real_log" => '\[%{GREEDYDATA:time_original}\] %{DATA:project}.%{LOGLEVEL:heroku_level}: %{GREEDYDATA:log_original} \[\]'
              }
          }

          if [log_original] {
              if "Operation Log" in [log_original] {
                  mutate {
                      add_tag => [ "parsed", "operation_log" ]
                  }
              } else if "OneSignal Success" in [log_original] or "OneSignal Error" in [log_original] {
                  if "key:" in [log_original] {
                      mutate {
                          add_tag => [ "parsed", "push", "push_via_onesignal_v2" ]
                      }
                  } else {
                      mutate {
                          add_tag => [ "parsed", "push", "push_via_onesignal_v1" ]
                      }
                  }
              } else if "SendGrid send mail success" in [log_original] {
                  mutate {
                      add_tag => [ "parsed", "email", "email_via_sendgrid" ]
                      add_field => {"email_provider" => "sendgrid"}
                  }
              } else if "LINE pushMessage" in [log_original] {
                  if ", result :" in [log_original] and ", code :" in [log_original] and ", err :" in [log_original] {
                      mutate {
                          add_tag => [ "parsed", "line_v2" ]
                      }
                  } else {
                      mutate {
                          add_tag => [ "parsed", "line" ]
                      }
                  }
              }

          } else {
              drop {}
              grok{
                  match => {
                      "real_log" => '\[%{GREEDYDATA:time_original}\] "%{WORD:method} %{URIPATH:uri_path}%{URIPARAM:uri_param}? HTTP/%{GREEDYDATA:http_version}" %{GREEDYDATA:status} %{GREEDYDATA:bytes} "%{GREEDYDATA:referrer}" "%{GREEDYDATA:user_agent}'
                  }
                  add_tag => [ "parsed", "apache_access_log" ]
              }

              if ! [uri_param] {
                  mutate {add_field => {"uri_param" => ""} }
              }
          }
        }

        if "operation_log" in [tags] {
            grok{
                match => {
                    "real_log" => 'Operation Log : %{GREEDYDATA:operation_log} \[\]'
                }
            }
            json {
                source => "operation_log"
            }

            if ! [input] {
                mutate {add_field => {"input" => ""} }
            }

            if ! [route] {
                mutate {add_field => {"route" => ""} }
            }

            mutate {
                remove_field => [
                    "no01", "content", "session_id", "host"
                ]
                convert => { "user_id" => "integer" }

                gsub => [
                    "input", "'", '\\''
                ]
            }
        }

        if "push_via_onesignal_v1" in [tags] {
                grok{
                    match => {
                        "log_original" => 'OneSignal %{GREEDYDATA:push_status} %{GREEDYDATA:push_user_type}_id => %{NUMBER:push_user_id}, %{GREEDYDATA:push_subject}: %{GREEDYDATA:push_message_id}  \[\]'
                    }
                }
                mutate {
                    gsub => [
                        "push_subject", "'", '\\''
                    ]
                    add_field => {
                        "push_provider" => "onesignal"
                    }
                }
        } else if "push_via_onesignal_v2" in [tags] {
             grok{
                 match => {
                     "log_original" => 'OneSignal %{GREEDYDATA:push_status} key: %{GREEDYDATA:push_user_type} id: %{NUMBER:push_user_id} mesg: %{GREEDYDATA:push_subject}: %{GREEDYDATA:push_message_id}  \[\]'
                 }
             }
             mutate {
                 gsub => [
                     "push_subject", "'", '\\''
                 ]
                 add_field => {
                     "push_provider" => "onesignal"
                 }
             }
        } else if "email_via_sendgrid" in [tags] {
            grok{
                match => {
                    "log_original" => 'SendGrid send mail %{GREEDYDATA:email_status} \'%{GREEDYDATA:email_subject}\' : X-Message-Id: %{GREEDYDATA:email_message_id}, to : %{GREEDYDATA:email_to}'
                }
            }
            mutate {
                gsub => [
                    "email_subject", "'", '\\''
                ]
            }
        }

        if "line" in [tags] {
            grok{
                match => {
                    "log_original" => '\[%{WORD:line_event}\] LINE pushMessage to %{GREEDYDATA:line_open_id} , (Result|message) : %{GREEDYDATA:line_data}  \[\]'
                }
            }
            mutate {
                gsub => [
                    "line_data", "'", '\\''
                ]
            }
        }

        if "line_v2" in [tags] {
            grok{
                match => {
                    "log_original" => 'LINE pushMessage to %{GREEDYDATA:line_open_id} , message : %{GREEDYDATA:line_data} , result : %{DATA:line_result} , code : %{DATA:line_code} , err : %{DATA:line_err} \[\]'
                }
            }
            mutate {
                gsub => [
                    "line_data", "'", '\\''
                ]
            }
        }

        mutate {
            remove_field => [
                "message", "log_original", "real_log"
            ]
        }
    }
}


output {
    if "comiru_app_log_ch" in [tags] {
        stdout{}
        if "splited" in [tags] {
            if "parsed" in [tags] {
                if "router_log" in [tags] {
                    #http {
                    #    url => "${CLICKHOUSE_ADDR}"
                    #    http_method => "post"
                    #    format => "message"
                    #    #message => "insert into comiru.router_log (request_id, path, method, status, bytes, service, fwd, host, timestamp) values ('%{request_id}', '%{uri_path}', '%{method}', '%{status}', '%{bytes}', '%{service}', '%{fwd}', '%{request_host}', '%{timestamp}');"
                    #    message => "insert into comiru.router_log (request_id, path, method, status, bytes, service, ip, fwd, host, timestamp) values ('%{request_id}', '%{uri_path}', '%{method}', '%{status}', '%{bytes}', '%{service}', '%{ip}', '%{fwd}', '%{request_host}', '%{timestamp}');"
                    #}
                    #redis {
                    #    data_type => "list"
                    #    host => "${REDIS_INTERNAL_HOST}"
                    #    port =>  "${REDIS_INTERNAL_PORT}"
                    #    batch => true
                    #    key => "workbench_database_router_log_for_clickhouse"
                    #}

                    #if "noticeable" in [tags] {
                    #    if "router_5xx" in [tags] {
                    #        http {
                    #             url => "${ACCESS_ERROR_ENDPOINT}"
                    #             http_method => "post"
                    #             format => "json"
                    #             #message => "%{request_id}"
                    #        }
                    #    }
                    #}
                } else if "operation_log" in [tags] {
                    #redis {
                    #    data_type => "list"
                    #    host => "${REDIS_INTERNAL_HOST}"
                    #    batch => true
                    #    key => "workbench_database_operation-log"
                    #    port =>  "${REDIS_INTERNAL_PORT}"
                    #}
                    #redis {
                    #    data_type => "list"
                    #    host => "${REDIS_INTERNAL_HOST}"
                    #    port =>  "${REDIS_INTERNAL_PORT}"
                    #    batch => true
                    #    key => "workbench_database_operation_log_for_clickhouse"
                    #}

                    #http {
                    #    url => "${CLICKHOUSE_ADDR}"
                    #    http_method => "post"
                    #    format => "message"
                    #    message => "insert into comiru.operation_log (user_id, user_type, path, route, user_agent, request_id, ip, input, timestamp) values (%{user_id}, '%{user_type}', '%{path}', '%{route}', '%{user_agent}', '%{request_id}', '%{ip}', '%{input}', '%{timestamp}');"
                    #}
                } else if "metrics" in [tags] {
                    #stdout{}
                    #redis {
                    #    data_type => "list"
                    #    host => "${REDIS_INTERNAL_HOST}"
                    #    port => "${REDIS_INTERNAL_PORT}"
                    #    key => 'workbench_database_elk_metrics_v2'
                    #}
                } else if "push" in [tags] {
                    #redis {
                    #    data_type => "list"
                    #    host => "${REDIS_INTERNAL_HOST}"
                    #    batch => true
                    #    key => "workbench_database_push-log"
                    #    port =>  "${REDIS_INTERNAL_PORT}"
                    #}
                    #redis {
                    #    data_type => "list"
                    #    host => "${REDIS_INTERNAL_HOST}"
                    #    port =>  "${REDIS_INTERNAL_PORT}"
                    #    batch => true
                    #    key => "workbench_database_push_log_for_clickhouse"
                    #}
                    #http {
                    #     url => "${CLICKHOUSE_ADDR}"
                    #     http_method => "post"
                    #     format => "message"
                    #     message => "insert into comiru.push_log_v2 (provider, message_id, user_type, user_id, subject, status, timestamp) values ('%{push_provider}','%{push_message_id}', '%{push_user_type}', '%{push_user_id}', '%{push_subject}', '%{push_status}', '%{timestamp}');"
                    #}
                } else if "email" in [tags] {
                    #redis {
                    #    data_type => "list"
                    #    host => "${REDIS_INTERNAL_HOST}"
                    #    batch => true
                    #    key => "workbench_database_email-log"
                    #    port =>  "${REDIS_INTERNAL_PORT}"
                    #    #message=>"{'line_open_id':'%{line_open_id}','line_event':'%{line_event}','line_data':'%{line_data}',,'timestamp':'%{timestamp}'}"
                    #}
                    #redis {
                    #    data_type => "list"
                    #    host => "${REDIS_INTERNAL_HOST}"
                    #    port =>  "${REDIS_INTERNAL_PORT}"
                    #    batch => true
                    #    key => "workbench_database_email_log_for_clickhouse"
                    #}
                    #http {
                    #     url => "${CLICKHOUSE_ADDR}"
                    #     http_method => "post"
                    #     format => "message"
                    #     message => "insert into comiru.email_log_v2 (provider, message_id, subject, to, status, timestamp) values ('%{email_provider}', '%{email_message_id}', '%{email_subject}', '%{email_to}', '%{email_status}', '%{timestamp}');"
                    #}
                } else if "line" in [tags]{
                    #redis {
                    #   data_type => "list"
                    #   host => "${REDIS_INTERNAL_HOST}"
                    #   port =>  "${REDIS_INTERNAL_PORT}"
                    #   batch => true
                    #   key => "workbench_database_line-log"
                    #   #message=>"{'line_open_id':'%{line_open_id}','line_event':'%{line_event}','line_data':'%{line_data}',,'timestamp':'%{timestamp}'}"
                    #}
                    #redis {
                    #    data_type => "list"
                    #    host => "${REDIS_INTERNAL_HOST}"
                    #    port =>  "${REDIS_INTERNAL_PORT}"
                    #    batch => true
                    #    key => "workbench_database_line_log_for_clickhouse"
                    #}
                    #http {
                    #     url => "${CLICKHOUSE_ADDR}"
                    #     http_method => "post"
                    #     format => "message"
                    #     message => "insert into comiru.line_log_v2 (open_id, event, data, timestamp) values ('%{line_open_id}', '%{line_event}', '%{line_data}', '%{timestamp}');"
                    #}
                } else if "line_v2" in [tags]{
                    #http {
                    #     url => "${CLICKHOUSE_ADDR}"
                    #     http_method => "post"
                    #     format => "message"
                    #     message => "insert into comiru.line_log_v2 (open_id, event, result, code, err, data, timestamp) values ('%{line_open_id}', '%{line_event}', '%{line_result}', '%{line_code}', '%{line_err}', '%{line_data}', '%{timestamp}');"
                    #}
                    #redis {
                    #   data_type => "list"
                    #   host => "${REDIS_INTERNAL_HOST}"
                    #   port =>  "${REDIS_INTERNAL_PORT}"
                    #   batch => true
                    #   key => "workbench_database_line-log"
                    #   #message=>"{'line_open_id':'%{line_open_id}','line_event':'%{line_event}','line_data':'%{line_data}',,'timestamp':'%{timestamp}'}"
                    #}
                    #redis {
                    #    data_type => "list"
                    #    host => "${REDIS_INTERNAL_HOST}"
                    #    port =>  "${REDIS_INTERNAL_PORT}"
                    #    batch => true
                    #    key => "workbench_database_line_log_for_clickhouse"
                    #}
                }
            }
        }
    }
}
