input {
    redis {
        data_type => "list"
        key => "clickhouse"
        host => "${REDIS_INTERNAL_HOST}"
        port => "${REDIS_INTERNAL_PORT}"
        # password => "${REDIS_INTERNAL_PASSWORD}"
        threads => 5
        tags => ["comiru_app_log_ch"]
    }
}

filter {
    if "comiru_app_log_ch" in [tags] {
        # start type the logs
        # if ([real_log] =~ "at=" ) {
        if ([real_log] =~ /^at=.*/) {
            mutate {
                add_tag => ["parsed", "router_log"]
                convert => ["status", "integer"]
            }

            # if [status] > 499 {
            #     mutate {
            #         add_tag => [ "noticeable", "router_5xx" ]
            #     }
            # }
        } elseif ("Operation Log :" in [real_log]){
            mutate {
                add_tag => [ "parsed", "operation_log"]
            }
        } elseif "OneSignal Success" in [real_log] or "OneSignal Error" in [real_log] {
             if "key:" in [real_log] {
                 mutate {
                     add_tag => [ "parsed", "push", "push_via_onesignal_v2" ]
                 }
             } else {
                 mutate {
                     add_tag => [ "parsed", "push", "push_via_onesignal_v1" ]
                 }
             }
        } elseif "SendGrid send mail success" in [real_log] {
            mutate {
                add_tag => [ "parsed", "email", "email_via_sendgrid" ]
                add_field => {"email_provider" => "sendgrid"}
            }
        } elseif "LINE pushMessage" in [real_log] {
            if ", result :" in [real_log] and ", code :" in [real_log] and ", err :" in [real_log] {
                mutate {
                    add_tag => [ "parsed", "line_v2" ]
                }
            } else {
                mutate {
                    add_tag => [ "parsed", "line" ]
                }
            }
        } elseif ": Send mail {" in [real_log] {
            mutate {
                add_tag => [ "parsed", "email_log_v3" ]
            }
        } elseif ": Send push {" in [real_log] {
             mutate {
                 add_tag => [ "parsed", "push_log_v3" ]
             }
        } elseif ([real_log] =~ "source=" ) {
            mutate {
                gsub => [
                    "real_log", "bytes", "",
                    "real_log", "kB", "",
                    "real_log", "mB", "",
                    "real_log", "gB", "",
                    "real_log", "MB", "",
                    "real_log", "pages", ""
                ]
                add_tag => [ "parsed", "metrics" ]
            }
        } elseif "Worker JobSuccess" in [real_log] or "Worker JobFailed_Retry" in [real_log] or "Worker JobFailed_Discard" in [real_log] {
            mutate {
                add_tag => [ "parsed", "worker_log" ]
            }
        }

        # start Grok to extract the logs

        if "router_log" in [tags] {
            if ("code=" in [real_log] and "desc=" in [real_log]){
                grok{
                    match => {
                        "real_log" => 'at=%{WORD:at} code=%{GREEDYDATA:heroku_code} desc=%{GREEDYDATA:heroku_desc} method=%{WORD:method} path="%{URIPATH:uri_path}%{URIPARAM:uri_param}?" host=%{URIHOST:request_host} request_id=%{UUID:request_id} fwd="%{GREEDYDATA:fwd}" dyno=%{NOTSPACE:dyno} connect=%{NUMBER:connect}ms service=%{NUMBER:service}ms status=%{NUMBER:status} bytes=%{NUMBER:bytes} protocol=%{WORD:protocal}'
                    }
                }
            } else {
                grok{
                    match => {
                        "real_log" => 'at=%{WORD:at} method=%{WORD:method} path="%{URIPATH:uri_path}%{URIPARAM:uri_param}?" host=%{URIHOST:request_host} request_id=%{UUID:request_id} fwd="%{GREEDYDATA:fwd}" dyno=%{NOTSPACE:dyno} connect=%{NUMBER:connect}ms service=%{NUMBER:service}ms status=%{NUMBER:status} bytes=%{NUMBER:bytes} protocol=%{WORD:protocal}'
                    }
                    add_field => {
                        "heroku_code" => ""
                        "heroku_desc" => ""
                    }
                }
            }
        } elseif "operation_log" in [tags] {
            grok{
                match => {
                    "real_log" => '\[%{TIMESTAMP_ISO8601:logtime_inline}\] %{GREEDYDATA:project}\.%{GREEDYDATA:level}: Operation Log : %{GREEDYDATA:log_json} %{GREEDYDATA:extra_json}'
                }
            }

            mutate {
                remove_field => [
                    "no01", "content", "session_id", "host", "message"
                ]
                convert => { "[operation_log][user_id]" => "integer" }
            }
        } elseif "email_via_sendgrid" in [tags] {
            grok{
                match => {
                    "real_log" => 'SendGrid send mail %{GREEDYDATA:email_status} \'%{GREEDYDATA:email_subject}\' : X-Message-Id: %{GREEDYDATA:email_message_id}, to : %{GREEDYDATA:email_to}'
                }
            }

            mutate {
                gsub => [
                    "email_subject", "'", '\\''
                ]
            }
        } elseif "push_via_onesignal_v1" in [tags] {
            grok{
                match => {
                    "real_log" => 'OneSignal %{GREEDYDATA:push_status} %{GREEDYDATA:push_user_type}_id => %{NUMBER:push_user_id}, %{GREEDYDATA:push_subject}: %{GREEDYDATA:push_message_id}  \[\]'
                }
            }

            mutate {
                gsub => [
                    "push_subject", "'", '\\''
                ]
                add_field => {
                    "push_provider" => "onesignal"
                }
            }
        } elseif "push_via_onesignal_v2" in [tags] {
             grok{
                 match => {
                     "real_log" => 'OneSignal %{GREEDYDATA:push_status} key: %{GREEDYDATA:push_user_type} id: %{NUMBER:push_user_id} mesg: %{GREEDYDATA:push_subject}: %{GREEDYDATA:push_message_id}  \[\]'
                 }
             }

             mutate {
                 gsub => [
                     "push_subject", "'", '\\''
                 ]
                 add_field => {
                     "push_provider" => "onesignal"
                 }
             }
        } elseif "email_via_sendgrid" in [tags] {
            grok{
                match => {
                    "real_log" => 'SendGrid send mail %{GREEDYDATA:email_status} \'%{GREEDYDATA:email_subject}\' : X-Message-Id: %{GREEDYDATA:email_message_id}, to : %{GREEDYDATA:email_to}'
                }
            }

            mutate {
                gsub => [
                    "email_subject", "'", '\\''
                ]
            }
        } elseif "line" in [tags] {
             grok{
                 match => {
                     "real_log" => '\[%{WORD:line_event}\] LINE pushMessage to %{GREEDYDATA:line_open_id} , (Result|message) : %{GREEDYDATA:line_data}  \[\]'
                 }
             }

             mutate {
                 gsub => [
                     "line_data", "'", '\\''
                 ]
             }
        } elseif "line_v2" in [tags] {
             grok{
                 match => {
                     "real_log" => 'LINE pushMessage to %{GREEDYDATA:line_open_id} , message : %{GREEDYDATA:line_data} , result : %{DATA:line_result} , code : %{DATA:line_code} , err : %{DATA:line_err} \[\]'
                 }
             }

             mutate {
                 gsub => [
                     "line_data", "'", '\\''
                 ]
             }
        } elseif "email_log_v3" in [tags] {
           grok{
               match => {
                   "real_log" => '\[%{TIMESTAMP_ISO8601:logtime_inline}\] %{GREEDYDATA:project}\.%{GREEDYDATA:level}: Send mail %{GREEDYDATA:log_json} %{GREEDYDATA:extra_json}'
               }
           }
        } elseif "push_log_v3" in [tags] {
            grok{
                match => {
                    "real_log" => '\[%{TIMESTAMP_ISO8601:logtime_inline}\] %{GREEDYDATA:project}\.%{GREEDYDATA:level}: Send push %{GREEDYDATA:log_json} %{GREEDYDATA:extra_json}'
                }
            }
        } elseif "worker_log" in [tags] {
            grok{
                match => {
                    "real_log" => '\[%{TIMESTAMP_ISO8601:logtime}\] %{GREEDYDATA:project}\.%{GREEDYDATA:level}: Worker Job%{DATA:status} %{GREEDYDATA:log_json} %{GREEDYDATA:extra_json}'
                }
            }
        } elseif "metrics" in [tags] {
            kv {
                source => "real_log"
                value_split => "="
                target => "metrics"
            }

            if [metrics][dyno] {
                grok{
                    match => {
                        "[metrics][dyno]" => 'heroku\.%{DATA:app_id}\.%{GREEDYDATA:dyno_id}'
                    }
                    target => "metrics"
                }

                mutate {
                    add_field => {
                        "[metrics][source_type]" => "dyno"
                    }
                }
            }

            if [metrics][source] and ("web." in [metrics][source] or "worker." in [metrics][source] or "scheduler." in [metrics][source]){
                grok{
                    match => {
                        "[metrics][source]" => '%{DATA:metrics_source}\.%{GREEDYDATA:instance}'
                    }
                    target => "metrics"
                }

                mutate {
                    remove_field => ["[metrics][source]", "[metrics][dyno]"]
                }

                mutate {
                    add_field => {
                        "[metrics][source]" => "%{[metrics][metrics_source]}"
                    }
                    remove_field => ["[metrics][metrics_source]"]
                }
            }

            if "source=REDIS" in [real_log] or "source=HEROKU" in [real_log] or "source=DATABASE" in [real_log] {
                mutate {
                    add_field => {
                        "[metrics][app_id]" => "%{[metrics][source]}"
                        "[metrics][instance]" => "%{[metrics][addon]}"
                        "[metrics][source_type]" => "addon"
                    }
                    remove_field => ["[metrics][addon]", "[metrics][metrics_source]"]
                }
            }
        }
    }
}

output {
    if "comiru_app_log_ch" in [tags] {
        if "parsed" in [tags] {
            if "router_log" in [tags] {
                # http {
                #     url => "${CLICKHOUSE_ADDR}"
                #     http_method => "post"
                #     format => "message"
                #     # message => "insert into comiru.router_log (request_id, path, method, status, bytes, service, fwd, host, timestamp) values ('%{request_id}', '%{uri_path}', '%{method}', '%{status}', '%{bytes}', '%{service}', '%{fwd}', '%{request_host}', '%{timestamp}');"
                #     message => "insert into comiru.router_log (request_id, path, method, status, bytes, service, ip, fwd, host, timestamp) values ('%{request_id}', '%{uri_path}', '%{method}', '%{status}', '%{bytes}', '%{service}', '%{ip}', '%{fwd}', '%{request_host}', '%{timestamp}');"
                # }

                # file {
                #     path => "/usr/share/logstash/router.log"
                # }

                redis {
                    data_type => "list"
                    host => "${REDIS_INTERNAL_HOST}"
                    port => "${REDIS_INTERNAL_PORT}"
                    # password => "${REDIS_INTERNAL_PASSWORD}"
                    batch => true
                    key => "workbench_database_router_log_for_clickhouse"
                }

                # if "noticeable" in [tags] {
                #     if "router_5xx" in [tags] {
                #         http {
                #              url => "${ACCESS_ERROR_ENDPOINT}"
                #              http_method => "post"
                #              format => "json"
                #              # message => "%{request_id}"
                #         }
                #     }
                # }
            } elseif "operation_log" in [tags] {
                # redis {
                #     data_type => "list"
                #     host => "${REDIS_INTERNAL_HOST}"
                #     batch => true
                #     key => "workbench_database_operation-log"
                #     port => "${REDIS_INTERNAL_PORT}"
                #     # password => "${REDIS_INTERNAL_PASSWORD}"
                # }
                redis {
                    data_type => "list"
                    host => "${REDIS_INTERNAL_HOST}"
                    port => "${REDIS_INTERNAL_PORT}"
                    # password => "${REDIS_INTERNAL_PASSWORD}"
                    batch => true
                    key => "workbench_database_operation_log_for_clickhouse"
                }

                # http {
                #     url => "${CLICKHOUSE_ADDR}"
                #     http_method => "post"
                #     format => "message"
                #     message => "insert into comiru.operation_log (user_id, user_type, path, route, user_agent, request_id, ip, input, timestamp) values (%{user_id}, '%{user_type}', '%{path}', '%{route}', '%{user_agent}', '%{request_id}', '%{ip}', '%{input}', '%{timestamp}');"
                # }
            } elseif "metrics" in [tags] {
                # stdout {}

                # redis {
                #     data_type => "list"
                #     host => "${REDIS_INTERNAL_HOST}"
                #     port => "${REDIS_INTERNAL_PORT}"
                #     # password => "${REDIS_INTERNAL_PASSWORD}"
                #     key => "workbench_database_elk_metrics_v2"
                # }
            } elseif "push" in [tags] {
                # redis {
                #     data_type => "list"
                #     host => "${REDIS_INTERNAL_HOST}"
                #     batch => true
                #     key => "workbench_database_push-log"
                #     port => "${REDIS_INTERNAL_PORT}"
                #     # password => "${REDIS_INTERNAL_PASSWORD}"
                # }
                redis {
                    data_type => "list"
                    host => "${REDIS_INTERNAL_HOST}"
                    port => "${REDIS_INTERNAL_PORT}"
                    # password => "${REDIS_INTERNAL_PASSWORD}"
                    batch => true
                    key => "workbench_database_push_log_for_clickhouse"
                }
                # http {
                #      url => "${CLICKHOUSE_ADDR}"
                #      http_method => "post"
                #      format => "message"
                #      message => "insert into comiru.push_log_v2 (provider, message_id, user_type, user_id, subject, status, timestamp) values ('%{push_provider}','%{push_message_id}', '%{push_user_type}', '%{push_user_id}', '%{push_subject}', '%{push_status}', '%{timestamp}');"
                # }
            } elseif "email" in [tags] {
                # redis {
                #     data_type => "list"
                #     host => "${REDIS_INTERNAL_HOST}"
                #     batch => true
                #     key => "workbench_database_email-log"
                #     port => "${REDIS_INTERNAL_PORT}"
                #     # password => "${REDIS_INTERNAL_PASSWORD}"
                #     # message=>"{'line_open_id':'%{line_open_id}','line_event':'%{line_event}','line_data':'%{line_data}',,'timestamp':'%{timestamp}'}"
                # }
                redis {
                    data_type => "list"
                    host => "${REDIS_INTERNAL_HOST}"
                    port => "${REDIS_INTERNAL_PORT}"
                    # password => "${REDIS_INTERNAL_PASSWORD}"
                    batch => true
                    key => "workbench_database_email_log_for_clickhouse"
                }
                # http {
                #      url => "${CLICKHOUSE_ADDR}"
                #      http_method => "post"
                #      format => "message"
                #      message => "insert into comiru.email_log_v2 (provider, message_id, subject, to, status, timestamp) values ('%{email_provider}', '%{email_message_id}', '%{email_subject}', '%{email_to}', '%{email_status}', '%{timestamp}');"
                # }
            } elseif "line" in [tags]{
                # redis {
                #    data_type => "list"
                #    host => "${REDIS_INTERNAL_HOST}"
                #    port => "${REDIS_INTERNAL_PORT}"
                #    # password => "${REDIS_INTERNAL_PASSWORD}"
                #    batch => true
                #    key => "workbench_database_line-log"
                #    # message=>"{'line_open_id':'%{line_open_id}','line_event':'%{line_event}','line_data':'%{line_data}',,'timestamp':'%{timestamp}'}"
                # }
                redis {
                    data_type => "list"
                    host => "${REDIS_INTERNAL_HOST}"
                    port => "${REDIS_INTERNAL_PORT}"
                    # password => "${REDIS_INTERNAL_PASSWORD}"
                    batch => true
                    key => "workbench_database_line_log_for_clickhouse"
                }
                # http {
                #      url => "${CLICKHOUSE_ADDR}"
                #      http_method => "post"
                #      format => "message"
                #      message => "insert into comiru.line_log_v2 (open_id, event, data, timestamp) values ('%{line_open_id}', '%{line_event}', '%{line_data}', '%{timestamp}');"
                # }
            } elseif "line_v2" in [tags]{
                # http {
                #      url => "${CLICKHOUSE_ADDR}"
                #      http_method => "post"
                #      format => "message"
                #      message => "insert into comiru.line_log_v2 (open_id, event, result, code, err, data, timestamp) values ('%{line_open_id}', '%{line_event}', '%{line_result}', '%{line_code}', '%{line_err}', '%{line_data}', '%{timestamp}');"
                # }
                # redis {
                #    data_type => "list"
                #    host => "${REDIS_INTERNAL_HOST}"
                #    port => "${REDIS_INTERNAL_PORT}"
                #    # password => "${REDIS_INTERNAL_PASSWORD}"
                #    batch => true
                #    key => "workbench_database_line-log"
                #    # message=>"{'line_open_id':'%{line_open_id}','line_event':'%{line_event}','line_data':'%{line_data}',,'timestamp':'%{timestamp}'}"
                # }
                redis {
                    data_type => "list"
                    host => "${REDIS_INTERNAL_HOST}"
                    port => "${REDIS_INTERNAL_PORT}"
                    # password => "${REDIS_INTERNAL_PASSWORD}"
                    batch => true
                    key => "workbench_database_line_log_for_clickhouse"
                }
            } elseif "email_log_v3" in [tags]{
                 # stdout {}

                 redis {
                     data_type => "list"
                     host => "${REDIS_INTERNAL_HOST}"
                     port => "${REDIS_INTERNAL_PORT}"
                     # password => "${REDIS_INTERNAL_PASSWORD}"
                     batch => true
                     key => "workbench_database_email_log_v3_for_clickhouse"
                 }
            } elseif "push_log_v3" in [tags]{
                 #stdout{}

                 redis {
                     data_type => "list"
                     host => "${REDIS_INTERNAL_HOST}"
                     port => "${REDIS_INTERNAL_PORT}"
                     # password => "${REDIS_INTERNAL_PASSWORD}"
                     batch => true
                     key => "workbench_database_push_log_v3_for_clickhouse"
                 }
            } elseif "worker_log" in [tags] {
                 # file {
                 #     path => "/usr/share/logstash/output.log"
                 # }

                 redis {
                     data_type => "list"
                     host => "${REDIS_INTERNAL_HOST}"
                     port => "${REDIS_INTERNAL_PORT}"
                     # password => "${REDIS_INTERNAL_PASSWORD}"
                     batch => true
                     key => "workbench_database_worker_log_for_clickhouse"
                 }
            }
        }
    }
}
